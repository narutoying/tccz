/*
 * Tceon.com Inc.
 * Copyright (c) 2009 All Rights Reserved.
 */
package com.tccz.tccz.common.dal.daointerface;

// auto generated imports
import com.tccz.tccz.common.dal.dataobject.PersonDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import com.tccz.tccz.dal.util.PageList;

/**
 * A dao interface provides methods to access database table <tt>person</tt>.
 *
 * This file is generated by <tt>paygw-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/person.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>paygw-dalgen</tt> 
 * to generate this file.
 *
 * @author Cheng Li
 */
public interface PersonDAO {
	/**
	 *  Insert one <tt>PersonDO</tt> object to DB table <tt>person</tt>, return primary key
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into person(name,id_card_number,account_number,create_time,modify_time) values (?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)</tt>
	 *
	 *	@param person
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int insert(PersonDO person) throws DataAccessException;

	/**
	 *  Update DB table <tt>person</tt>.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update person set name=?, account_number=?, modify_time=CURRENT_TIMESTAMP where (id_card_number = ?)</tt>
	 *
	 *	@param person
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(PersonDO person) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>person</tt>.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from person where (id_card_number = ?)</tt>
	 *
	 *	@param idCardNumber
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int delete(String idCardNumber) throws DataAccessException;

	/**
	 *  Query DB table <tt>person</tt> for records.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from person where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return PersonDO
	 *	@throws DataAccessException
	 */	 
    public PersonDO getById(int id) throws DataAccessException;

	/**
	 *  Query DB table <tt>person</tt> for records.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from person where (id_card_number = ?)</tt>
	 *
	 *	@param idCardNumber
	 *	@return PersonDO
	 *	@throws DataAccessException
	 */	 
    public PersonDO getByIdCard(String idCardNumber) throws DataAccessException;

	/**
	 *  Query DB table <tt>person</tt> for records.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from person</tt>
	 *
	 *	@param fuzzyName
	 *	@return List<PersonDO>
	 *	@throws DataAccessException
	 */	 
    public List<PersonDO> fuzzyQueryByName(String fuzzyName) throws DataAccessException;

	/**
	 *  Query DB table <tt>person</tt> for records.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from person</tt>
	 *
	 *	@param personName
	 *	@param pageSize
	 *	@param pageNum
	 *	@return PageList
	 *	@throws DataAccessException
	 */	 
    public PageList fuzzyPageQueryByName(String personName, int pageSize, int pageNum) throws DataAccessException;

}