/*
 * Tceon.com Inc.
 * Copyright (c) 2009 All Rights Reserved.
 */
package com.tccz.tccz.common.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import com.tccz.tccz.common.dal.daointerface.BandarNoteDAO;

// auto generated imports
import com.tccz.tccz.common.dal.dataobject.BandarNoteDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Date;
import com.tccz.tccz.dal.util.PageList;
import com.tccz.tccz.common.dal.dataobject.BandarNoteDO;
import java.util.Date;
import java.util.Map;
import java.util.HashMap;
import com.tccz.tccz.dal.util.Paginator;

import java.util.HashMap;
import java.util.Map;

/**
 * An ibatis based implementation of dao interface <tt>com.tccz.tccz.common.dal.daointerface.BandarNoteDAO</tt>.
 *
 * This file is generated by <tt>paygw-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/bandar_note.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>paygw-dalgen</tt> 
 * to generate this file.
 *
 * @author Cheng Li
 */
public class IbatisBandarNoteDAO extends SqlMapClientDaoSupport implements BandarNoteDAO {
	/**
	 *  Query DB table <tt>bandar_note</tt> for records.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from bandar_note where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return BandarNoteDO
	 *	@throws DataAccessException
	 */	 
    public BandarNoteDO getById(int id) throws DataAccessException {
        Integer param = new Integer(id);
        return (BandarNoteDO) getSqlMapClientTemplate().queryForObject("MS-BANDAR-NOTE-GET-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>bandar_note</tt> for records.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from bandar_note</tt>
	 *
	 *	@return List<BandarNoteDO>
	 *	@throws DataAccessException
	 */	 
    public List<BandarNoteDO> getAll() throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-BANDAR-NOTE-GET-ALL", null);

    }

	/**
	 *  Insert one <tt>BandarNoteDO</tt> object to DB table <tt>bandar_note</tt>, return primary key
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into bandar_note(bandar_note_number,enterprise_id,type,amount,draw_date,margin_amount,exposure_amount,exposure_close_amount,create_time,modify_time,expire_date) values (?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, ?)</tt>
	 *
	 *	@param bandarNote
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int insert(BandarNoteDO bandarNote) throws DataAccessException {
    	if (bandarNote == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-BANDAR-NOTE-INSERT", bandarNote);

        return bandarNote.getId();
    }

	/**
	 *  Delete records from DB table <tt>bandar_note</tt>.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from bandar_note where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int delete(int id) throws DataAccessException {
        Integer param = new Integer(id);

        return getSqlMapClientTemplate().delete("MS-BANDAR-NOTE-DELETE", param);
    }

	/**
	 *  Update DB table <tt>bandar_note</tt>.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update bandar_note set bandar_note_number=?, enterprise_id=?, type=?, amount=?, draw_date=?, margin_amount=?, exposure_amount=?, exposure_close_amount=?, expire_date=?, modify_time=CURRENT_TIMESTAMP where (id = ?)</tt>
	 *
	 *	@param bandarNote
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(BandarNoteDO bandarNote) throws DataAccessException {
    	if (bandarNote == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-BANDAR-NOTE-UPDATE", bandarNote);
    }

	/**
	 *  Query DB table <tt>bandar_note</tt> for records.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from bandar_note</tt>
	 *
	 *	@param enterpriseName
	 *	@param bandarNoteNumber
	 *	@param bandarNoteType
	 *	@param showExpire
	 *	@param expireStart
	 *	@param expireEnd
	 *	@param pageSize
	 *	@param pageNum
	 *	@return PageList
	 *	@throws DataAccessException
	 */	 
    public PageList getByCondition(String enterpriseName, String bandarNoteNumber, String bandarNoteType, Boolean showExpire, Date expireStart, Date expireEnd, int pageSize, int pageNum) throws DataAccessException {
        Map param = new HashMap();

        param.put("enterpriseName", enterpriseName);
        param.put("bandarNoteNumber", bandarNoteNumber);
        param.put("bandarNoteType", bandarNoteType);
        param.put("showExpire", showExpire);
        param.put("expireStart", expireStart);
        param.put("expireEnd", expireEnd);
        param.put("pageSize", new Integer(pageSize));
        param.put("pageNum", new Integer(pageNum));

        Paginator paginator = new Paginator();
        paginator.setItemsPerPage(pageSize);
        paginator.setPage(pageNum / pageSize + 1);

        paginator.setItems(((Integer) getSqlMapClientTemplate().queryForObject("MS-TCCZ-BANDAR-NOTE-GET-BY-CONDITION-COUNT-FOR-PAGING", param)).intValue());
        
        PageList  pageList = new PageList();
        pageList.setPaginator(paginator);
        
        if (paginator.getBeginIndex() <= paginator.getItems()) {
            param.put("startRow", new Integer(paginator.getBeginIndex()));
            param.put("endRow", new Integer(paginator.getEndIndex()));
            pageList.addAll(getSqlMapClientTemplate().queryForList("MS-BANDAR-NOTE-GET-BY-CONDITION", param));
        }
        
        return pageList;
    }

	/**
	 *  Query DB table <tt>bandar_note</tt> for records.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from bandar_note</tt>
	 *
	 *	@param enterpriseId
	 *	@param expireStart
	 *	@param expireEnd
	 *	@return List<BandarNoteDO>
	 *	@throws DataAccessException
	 */	 
    public List<BandarNoteDO> getByExpireDate(int enterpriseId, Date expireStart, Date expireEnd) throws DataAccessException {
        Map param = new HashMap();

        param.put("enterpriseId", new Integer(enterpriseId));
        param.put("expireStart", expireStart);
        param.put("expireEnd", expireEnd);

        return getSqlMapClientTemplate().queryForList("MS-BANDAR-NOTE-GET-BY-EXPIRE-DATE", param);

    }

}